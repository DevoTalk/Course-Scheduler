@model Course_Scheduler.Models.ViewModels.AddCourseViewModel

@{
    ViewData["Title"] = "Edit";

    var teacherNames = Json.Serialize(((List<Teacher>)ViewBag.Teachers).Select(t => t.Name));
    var teacherCodes = Json.Serialize(((List<Teacher>)ViewBag.Teachers).Select(t => t.TeacherCode));
    var teacherIds = Json.Serialize(((List<Teacher>)ViewBag.Teachers).Select(t => t.ID));
    var json = Json.Serialize(((List<Course>)ViewData["RequiredCourse"]).Select(c => c.Name));
    var reqIdjson = Json.Serialize(((List<Course>)ViewData["RequiredCourse"]).Select(c => c.ID));
    var reqCodeJson = Json.Serialize(((List<Course>)ViewData["RequiredCourse"]).Select(c => c.CourseCode));
    var groupNames = Json.Serialize(((List<Group>)ViewData["Groups"]).Select(g => g.Name));
    var groupIds = Json.Serialize(((List<Group>)ViewData["Groups"]).Select(g => g.ID));
}

<h1>Edit</h1>

<h4>Course</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="addCoursefrom" asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Course.Name" class="control-label"></label>
                <input asp-for="Course.Name" class="form-control" />
                <span asp-validation-for="Course.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Course.Credits" class="control-label"></label>
                <input asp-for="Course.Credits" class="form-control" />
                <span asp-validation-for="Course.Credits" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Course.CourseCode" class="control-label"></label>
                <input asp-for="Course.CourseCode" class="form-control" />
                <span asp-validation-for="Course.CourseCode" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Course.CountOfClass" class="control-label"></label>
                <input asp-for="Course.CountOfClass" class="form-control" />
                <span asp-validation-for="Course.CountOfClass" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Course.Groups" class="control-label"></label>
                <div class="input-group mb-3">
                    <input type="text" id="newGroup" class="form-control" list="groupList" placeholder="Enter item here">
                    <datalist id="groupList"></datalist>
                    <button onclick="addGroup()" type="button" class="btn btn-primary">Add Item</button>
                </div>
                <ul id="GroupList" class="list-group">
                    @foreach (var item in Model.GroupIds)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @(((List<Group>)ViewData["Groups"]).First(c => c.ID == item).Name)
                            <input type="hidden" value="@item" class="Group">
                            <button class="btn btn-sm btn-outline-danger" type="button" onclick="RemoveItem(this)">Remove</button>
                        </li>
                    }
                </ul>
            </div>

            <div class="form-group">
                <label asp-for="Course.Prerequisites" class="control-label"></label>
                <div class="input-group mb-3">
                    <input type="text" id="newItem" class="form-control" list="courseList" placeholder="Enter item here">
                    <datalist id="courseList"></datalist>
                    <button onclick="addItem()" type="button" class="btn btn-primary">Add Item</button>
                </div>
                <ul id="itemList" class="list-group">
                    @foreach (var item in Model.PrerequisitesId)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @(((List<Course>)ViewData["RequiredCourse"]).First(c => c.ID == item).Name)
                            <input type="hidden" value="@item" class="requiredCourses">
                            <button class="btn btn-sm btn-outline-danger" type="button" onclick="RemoveItem(this)">Remove</button>
                        </li>
                    }
                </ul>
                <span asp-validation-for="Course.Prerequisites" class="text-danger"></span>

            </div>
            <div class="form-group">
                <label asp-for="Course.CorequisiteCourses" class="control-label"></label>
                <div class="input-group mb-3">
                    <input type="text" id="newCorequisiteCoursesItem" class="form-control" list="corequisiteCourseList" placeholder="Enter item here">
                    <datalist id="corequisiteCourseList"></datalist>
                    <button onclick="addCorequisiteCoursesItem()" type="button" class="btn btn-primary">Add Item</button>
                </div>
                <ul id="CorequisiteCoursesItemList" class="list-group">
                    @foreach (var item in Model.CorequisitesId)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @(((List<Course>)ViewData["RequiredCourse"]).First(c => c.ID == item).Name)
                            <input type="hidden" value="@item" class="CorequisiteCourses">
                            <button class="btn btn-sm btn-outline-danger" type="button" onclick="RemoveItem(this)">Remove</button>
                        </li>
                    }
                </ul>
                <span asp-validation-for="Course.CorequisiteCourses" class="text-danger"></span>

            </div>

            <div class="form-group">
                <label asp-for="TeachersId" class="control-label"></label>
                <div class="input-group mb-3">
                    <input type="text" id="newTeacher" class="form-control" list="teacherList" placeholder="Enter item here">
                    <datalist id="teacherList"></datalist>
                    <button onclick="addTeacher()" type="button" class="btn btn-primary">Add Item</button>
                </div>
                <ul id="TeacherList" class="list-group">
                    @foreach (var item in Model.TeachersId)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            @(((List<Teacher>)ViewBag.Teachers).First(c => c.ID == item).Name)
                            <input type="hidden" value="@item" class="teachers">
                            <button class="btn btn-sm btn-outline-danger" type="button" onclick="RemoveItem(this)">Remove</button>
                        </li>
                    }
                </ul>
                <span asp-validation-for="TeachersId" class="text-danger"></span>
            </div>

            <input type="hidden" asp-for="Course.ID" />
            <div class="form-group">
                <input type="button" onclick="submitFrom()" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {

    <script>
        var requiredCourses = @json;
        var requiredCourseIds = @reqIdjson;
        var requiredCourseCodes = @reqCodeJson;
        var groupNames = @groupNames;
        var groupIds = @groupIds;
        var teacherNames = @teacherNames;
        var teacherCodes = @teacherCodes;
        var teacherIds = @teacherIds;

        document.addEventListener('DOMContentLoaded', function () {
            populateDatalist('groupList', groupNames);
            populateDatalist('courseList', requiredCourses);
            populateDatalist('corequisiteCourseList', requiredCourses);
            populateDatalist('teacherList', teacherNames.concat(teacherCodes));
        });

        function populateDatalist(datalistId, items) {
            var datalist = document.getElementById(datalistId);
            items.forEach(function (item) {
                var option = document.createElement('option');
                option.value = item;
                datalist.appendChild(option);
            });
        }

        function submitForm() {
            var form = document.getElementById("addCourseForm");
            EditNameOfRequiredCourses();
            EditNameOfCorequisiteCourses();
            EditNameOfGroups();
            EditNameOfTeachers();
            form.submit();
        }

        function EditNameOfTeachers() {
            var inputs = document.querySelectorAll('input[class="teachers"]');
            inputs.forEach(function (item, index) {
                item.name = `TeachersId[${index}]`;
            });
        }

        function EditNameOfRequiredCourses() {
            var inputs = document.querySelectorAll('input[class="requiredCourses"]');
            inputs.forEach(function (item, index) {
                item.name = `PrerequisitesId[${index}]`;
            });
        }

        function EditNameOfCorequisiteCourses() {
            var inputs = document.querySelectorAll('input[class="CorequisiteCourses"]');
            inputs.forEach(function (item, index) {
                item.name = `CorequisitesId[${index}]`;
            });
        }

        function EditNameOfGroups() {
            var inputs = document.querySelectorAll('input[class="Group"]');
            inputs.forEach(function (item, index) {
                item.name = `GroupIds[${index}]`;
            });
        }

        function addTeacher() {
            var newItemText = document.getElementById("newTeacher").value;
            var indexOfNewItemText = teacherNames.indexOf(newItemText);
            var indexOfNewItemCode = teacherCodes.indexOf(newItemText);

            if (!newItemText || (indexOfNewItemText === -1 && indexOfNewItemCode === -1)) return;

            var newListItem = document.createElement("li");
            newListItem.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");
            newListItem.textContent = indexOfNewItemCode === -1 ? newItemText : teacherNames[indexOfNewItemCode];

            var newInput = document.createElement("input");
            newInput.value = indexOfNewItemCode === -1 ? teacherIds[indexOfNewItemText] : teacherIds[indexOfNewItemCode];
            newInput.type = "hidden";
            newInput.classList.add("teachers");
            newListItem.appendChild(newInput);

            var removeButton = document.createElement("button");
            removeButton.classList.add("btn", "btn-sm", "btn-outline-danger");
            removeButton.textContent = "Remove";
            removeButton.onclick = function () {
                this.parentNode.remove();
            };
            newListItem.appendChild(removeButton);

            document.getElementById("TeacherList").appendChild(newListItem);
            document.getElementById("newTeacher").value = "";
            event.preventDefault();
        }

        function addGroup() {
            var newItemText = document.getElementById("newGroup").value;
            var indexOfNewItemText = groupNames.indexOf(newItemText);
            var indexOfNewItemCode = groupIds.indexOf(newItemText);

            if (!newItemText || (indexOfNewItemText === -1 && indexOfNewItemCode === -1)) return;

            var newListItem = document.createElement("li");
            newListItem.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");
            newListItem.textContent = indexOfNewItemCode === -1 ? newItemText : groupNames[indexOfNewItemCode];

            var newInput = document.createElement("input");
            newInput.value = indexOfNewItemCode === -1 ? groupIds[indexOfNewItemText] : groupIds[indexOfNewItemCode];
            newInput.type = "hidden";
            newInput.classList.add("Group");
            newListItem.appendChild(newInput);

            var removeButton = document.createElement("button");
            removeButton.classList.add("btn", "btn-sm", "btn-outline-danger");
            removeButton.textContent = "Remove";
            removeButton.onclick = function () {
                this.parentNode.remove();
            };
            newListItem.appendChild(removeButton);

            document.getElementById("GroupList").appendChild(newListItem);
            document.getElementById("newGroup").value = "";
            event.preventDefault();
        }

        function addCorequisiteCoursesItem() {
            var newItemText = document.getElementById("newCorequisiteCoursesItem").value;
            var indexOfNewItemText = requiredCourses.indexOf(newItemText);
            var indexOfNewItemCode = requiredCourseCodes.indexOf(newItemText);

            if (!newItemText || (indexOfNewItemText === -1 && indexOfNewItemCode === -1)) return;

            var newListItem = document.createElement("li");
            newListItem.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");
            newListItem.textContent = indexOfNewItemCode === -1 ? newItemText : requiredCourses[indexOfNewItemCode];

            var newInput = document.createElement("input");
            newInput.value = indexOfNewItemCode === -1 ? requiredCourseIds[indexOfNewItemText] : requiredCourseIds[indexOfNewItemCode];
            newInput.type = "hidden";
            newInput.classList.add("CorequisiteCourses");
            newListItem.appendChild(newInput);

            var removeButton = document.createElement("button");
            removeButton.classList.add("btn", "btn-sm", "btn-outline-danger");
            removeButton.textContent = "Remove";
            removeButton.onclick = function () {
                this.parentNode.remove();
            };
            newListItem.appendChild(removeButton);

            document.getElementById("CorequisiteCoursesItemList").appendChild(newListItem);
            document.getElementById("newCorequisiteCoursesItem").value = "";
            event.preventDefault();
        }

        function addItem() {
            var newItemText = document.getElementById("newItem").value;
            var indexOfNewItemText = requiredCourses.indexOf(newItemText);
            var indexOfNewItemCode = requiredCourseCodes.indexOf(newItemText);

            if (!newItemText || (indexOfNewItemText === -1 && indexOfNewItemCode === -1)) return;

            var newListItem = document.createElement("li");
            newListItem.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");
            newListItem.textContent = indexOfNewItemCode === -1 ? newItemText : requiredCourses[indexOfNewItemCode];

            var newInput = document.createElement("input");
            newInput.value = indexOfNewItemCode === -1 ? requiredCourseIds[indexOfNewItemText] : requiredCourseIds[indexOfNewItemCode];
            newInput.type = "hidden";
            newInput.classList.add("requiredCourses");
            newListItem.appendChild(newInput);

            var removeButton = document.createElement("button");
            removeButton.classList.add("btn", "btn-sm", "btn-outline-danger");
            removeButton.textContent = "Remove";
            removeButton.onclick = function () {
                this.parentNode.remove();
            };
            newListItem.appendChild(removeButton);

            document.getElementById("itemList").appendChild(newListItem);
            document.getElementById("newItem").value = "";
            event.preventDefault();
        }

        document.getElementById("newTeacher").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                addTeacher();
            }
        });
        document.getElementById("newCorequisiteCoursesItem").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                addCorequisiteCoursesItem();
            }
        });
        document.getElementById("newItem").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                addItem();
            }
        });
        document.getElementById("newGroup").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                addGroup();
            }
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
