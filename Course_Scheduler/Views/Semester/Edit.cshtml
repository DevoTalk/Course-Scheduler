@model Course_Scheduler.Models.ViewModels.AddSemesterViewModel


@{
    ViewData["Title"] = "Edit";
    var courses = (List<Course>)ViewData["Courses"];
    var json = Json.Serialize((courses).Select(c => c.Name));
    var reqIdjson = Json.Serialize((courses).Select(c => c.ID));
    var courseCode = Json.Serialize((courses).Select(c => c.CourseCode));

}


<h1>Create</h1>

<hr />
<div class="row">
    <div class="col-md-4">
        <form id="addCoursefrom" asp-action="Create">
            <input type="hidden" value="@Model.ID" />
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="CoursesId" class="control-label"></label>
                <div class="input-group mb-3">
                    <input type="text" id="newItem" class="form-control" placeholder="Enter item here" list="courseList">
                    <datalist id="courseList"></datalist>
                    <button onclick="addItem()" type="button" class="btn btn-primary">Add Item</button>
                </div>
                <ul id="itemList" class="list-group"></ul>
                @foreach (var item in Model.CoursesId)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @(courses.First(c => c.ID == item).Name)
                        <input type="hidden" value="@item" class="requiredCourses">
                        <button class="btn btn-sm btn-outline-danger" type="button" onclick="RemoveItem(this)">Remove</button>
                    </li>
                }
            </div>
            <div class="form-group">
                <input type="button" onclick="submitFrom()" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <script>

        function submitFrom() {
            var from = document.getElementById("addCoursefrom");
            EditNameOfRequiredCourses();
            from.submit();
        }

        function EditNameOfRequiredCourses() {
            var inputs = document.querySelectorAll('input[class="CoursesId"]');
            console.log(inputs);

            inputs.forEach(function (item, index) {
                item.name = `CoursesId[${index}]`
            });
        }

        var Courses = @json;
        var requiredCourseIds = @reqIdjson;
        var courseCode = @courseCode;
        console.log(Courses);
        console.log(requiredCourseIds);
        console.log(courseCode);


        function addItem() {
            var newItemText = document.getElementById("newItem").value;
            var indexOfNewItemText = Courses.indexOf(newItemText);
            var indexOfNewItemCode = courseCode.indexOf(newItemText);
            if (!newItemText || (indexOfNewItemText === -1 && indexOfNewItemCode === -1)) return; // Prevent empty items

            var newListItem = document.createElement("li");
            newListItem.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");
            if (indexOfNewItemCode == -1) {
                newListItem.textContent = newItemText;
            } else {
                newListItem.textContent = Courses[indexOfNewItemCode];
            }
            var newInput = document.createElement("input");
            if (indexOfNewItemCode == -1) {
                newInput.value = requiredCourseIds[indexOfNewItemText];
            } else {
                newInput.value = requiredCourseIds[indexOfNewItemCode];
            }
            newInput.type = "hidden";
            newInput.classList.add("CoursesId");
            newListItem.appendChild(newInput);

            var removeButton = document.createElement("button");
            removeButton.classList.add("btn", "btn-sm", "btn-outline-danger");
            removeButton.textContent = "Remove";
            removeButton.onclick = function () {
                this.parentNode.remove();
            };
            newListItem.appendChild(removeButton);

            document.getElementById("itemList").appendChild(newListItem);
            document.getElementById("newItem").value = "";
            event.preventDefault();
        }
        function populateDatalist(datalistId, items) {
            var datalist = document.getElementById(datalistId);
            items.forEach(function (item) {
                var option = document.createElement("option");
                option.value = item;
                datalist.appendChild(option);
            });
        }
        document.getElementById("newItem").addEventListener("keypress", function (event) {
            if (event.key === "Enter") {
                event.preventDefault();
                addItem();
            }
        });
        populateDatalist("courseList", Courses);

        function removeItem() {
            this.parentNode.remove();
        }
    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
