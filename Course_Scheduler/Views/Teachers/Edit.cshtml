@using Course_Scheduler.Models.Enum
@model Course_Scheduler.Models.ViewModels.UpdateTeacherViewModel
@{
    ViewData["Title"] = "Edit Teacher";
}

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col">
            <h1 class="display-4 text-primary">
                <i class="fas fa-edit me-3"></i>Edit Teacher
            </h1>
            <p class="text-muted">Update teacher information and preferences</p>
        </div>
    </div>

    <div class="row">
        <div class="col-lg-8">
            <div class="card shadow-sm">
                <div class="card-body">
                    <form asp-action="Edit" method="post" id="Form">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input asp-for="Name" class="form-control" placeholder="Name" required />
                                    <label asp-for="Name"></label>
                                    <span asp-validation-for="Name" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input asp-for="TeacherCode" class="form-control" placeholder="Teacher Code" required />
                                    <label asp-for="TeacherCode"></label>
                                    <span asp-validation-for="TeacherCode" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input asp-for="MaximumDayCount" class="form-control" placeholder="Maximum Day Count" required min="1" />
                                    <label asp-for="MaximumDayCount"></label>
                                    <span asp-validation-for="MaximumDayCount" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating mb-3">
                                    <input asp-for="PenaltyForEmptyTime" class="form-control" placeholder="Penalty For Empty Time" required min="0" />
                                    <label asp-for="PenaltyForEmptyTime"></label>
                                    <span asp-validation-for="PenaltyForEmptyTime" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <input type="hidden" asp-for="ID" />
                        @for (int i = 0; i < Enum.GetValues(typeof(ClassTimes)).Length; i++)
                        {
                            var time = (ClassTimes)Enum.GetValues(typeof(ClassTimes)).GetValue(i);
                            if(Model.PreferredTime.Select(p=>p.PreferredTime).Contains(time))
                            {
                                <input type="hidden" name="PreferredTime[@i].PreferredTime" value="@time" id="PreferredTime_@i" class="PreferredTimeInput">
                                <input type="hidden" name="PreferredTime[@i].Penalty" value="@Model.PreferredTime.First(p=>p.PreferredTime==time).Penalty" id="HiddenPreferredTimePenalty_@i" class="PenaltyInput">
                            }
                        }

                        <div class="card mt-4">
                            <div class="card-header bg-light">
                                <h5 class="mb-0"><i class="fas fa-clock me-2"></i>Preferred Time with Penalties</h5>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Time Slot</th>
                                                <th>Preference</th>
                                                <th>Penalty Points</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @for (int i = 0; i < Enum.GetValues(typeof(ClassTimes)).Length; i++)
                                            {
                                                var time = (ClassTimes)Enum.GetValues(typeof(ClassTimes)).GetValue(i);
                                                var isInList = Model.PreferredTime.Select(p => p.PreferredTime).Contains(time);
                                                <tr>
                                                    <td class="align-middle">@time</td>
                                                    <td class="align-middle">
                                                        <div class="form-check form-switch">
                                                            <input type="checkbox" class="form-check-input PreferredTime" 
                                                                onchange="handleCheckboxChange(@i)" 
                                                                id="PreferredTimeCheckbox_@i"
                                                                @(isInList ? "checked" : "") />
                                                            <input type="hidden" id="PreferredTimeValue_@i" value="@time">
                                                        </div>
                                                    </td>
                                                    <td>
                                                        <div class="input-group">
                                                            <input type="number" 
                                                                class="form-control penaltyInput" 
                                                                name="PreferredTime[@i].Penalty" 
                                                                min="0"
                                                                id="PreferredTimePenalty_@i"
                                                                value="@(isInList ? Model.PreferredTime.First(p=>p.PreferredTime==time).Penalty.ToString() : "")"
                                                                data-index="@i"
                                                                @(!isInList ? "disabled" : "")
                                                                placeholder="Enter penalty" 
                                                                required />
                                                            <span class="input-group-text">points</span>
                                                        </div>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>

                        <div class="mt-4 d-flex gap-2 flex-column fixed-footer-btn">
                            <button type="submit" class="btn btn-primary btn-lg">
                                <i class="fas fa-save me-2"></i>Save Changes
                            </button>
                            <a asp-action="Index" class="btn btn-outline-secondary btn-lg">
                                <i class="fas fa-arrow-left me-2"></i>Back to List
                            </a>
                        </div>

                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
@section style{
    <style>
        .fixed-bottom{
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
        }
        .fixed-footer-btn {
            position: sticky;
            bottom: 0;
            background: #fff;
            padding-top: 10px;
        }
        .container, .row, .card {
    overflow: visible !important;
}

    </style>
}
@section Scripts {
    <script>
        function handleCheckboxChange(index) {
            const checkbox = document.getElementById(`PreferredTimeCheckbox_${index}`);
            const timeValueInput = document.getElementById(`PreferredTimeValue_${index}`);
            const penaltyInput = document.getElementById(`PreferredTimePenalty_${index}`);
            const form = document.getElementById('Form');

            if (checkbox.checked) {
                penaltyInput.disabled = false;
                penaltyInput.required = true;

                const hiddenInput = document.createElement('input');
                hiddenInput.type = 'hidden';
                hiddenInput.name = penaltyInput.name;
                hiddenInput.value = penaltyInput.value || '0';
                hiddenInput.id = `HiddenPreferredTimePenalty_${index}`;
                hiddenInput.className = 'PenaltyInput';

                const timeInput = document.createElement('input');
                timeInput.type = 'hidden';
                timeInput.name = `PreferredTime[${index}].PreferredTime`;
                timeInput.value = timeValueInput.value;
                timeInput.id = `PreferredTime_${index}`;
                timeInput.className = 'PreferredTimeInput';
                
                form.appendChild(timeInput);
                form.appendChild(hiddenInput);
            } else {
                penaltyInput.disabled = true;
                penaltyInput.required = false;
                penaltyInput.value = '';

                const timeInput = document.getElementById(`PreferredTime_${index}`);
                const hiddenInput = document.getElementById(`HiddenPreferredTimePenalty_${index}`);
                
                if (timeInput) form.removeChild(timeInput);
                if (hiddenInput) form.removeChild(hiddenInput);
            }
            updateIndexes();
        }

        function updateIndexes() {
            const preferredTimeInputs = document.querySelectorAll('.PreferredTimeInput');
            const penaltyInputs = document.querySelectorAll('.PenaltyInput');
            
            preferredTimeInputs.forEach((input, index) => {
                input.name = `PreferredTime[${index}].PreferredTime`;
            });
            
            penaltyInputs.forEach((input, index) => {
                input.name = `PreferredTime[${index}].Penalty`;
            });
        }

        document.querySelectorAll('.penaltyInput').forEach(input => {
            input.addEventListener('change', function() {
                const index = this.getAttribute('data-index');
                const hiddenInput = document.getElementById(`HiddenPreferredTimePenalty_${index}`);
                if (hiddenInput) {
                    hiddenInput.value = this.value || '0';
                }
            });
        });
    </script>
}
