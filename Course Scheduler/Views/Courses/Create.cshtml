@model Course_Scheduler.Models.ViewModels.AddCourseViewModel

@{
    ViewData["Title"] = "Create";
    List<Teacher> teachers = ViewBag.Teachers;
    var json = Json.Serialize(((List<Course>)ViewData["RequiredCourse"]).Select(c => c.Name));
    var reqIdjson = Json.Serialize(((List<Course>)ViewData["RequiredCourse"]).Select(c => c.ID));

}


<h1>Create</h1>

<h4>Course</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form id="addCoursefrom" asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Course.Name" class="control-label"></label>
                <input asp-for="Course.Name" class="form-control" />
                <span asp-validation-for="Course.Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Course.Credits" class="control-label"></label>
                <input asp-for="Course.Credits" class="form-control" />
                <span asp-validation-for="Course.Credits" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Course.CourseCode" class="control-label"></label>
                <input asp-for="Course.CourseCode" class="form-control" />
                <span asp-validation-for="Course.CourseCode" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Course.CountOfClass" class="control-label"></label>
                <input asp-for="Course.CountOfClass" class="form-control" />
                <span asp-validation-for="Course.CountOfClass" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Course.Prerequisites" class="control-label"></label>
                <div class="input-group mb-3">
                    <input type="text" id="newItem" class="form-control" placeholder="Enter item here">
                    <button onclick="addItem()" type="button" class="btn btn-primary">Add Item</button>
                </div>
                <ul id="itemList" class="list-group"></ul>
            </div>
            <div class="form-group">
                <label asp-for="TeachersId" class="control-label"></label>
                <span asp-validation-for="TeachersId" class="text-danger"></span>
                <br />
                @foreach (var item in teachers)
                {
                    <div class="form-check form-check-inline">
                        <label class="form-check-label" for="@($"chk{item.Name}")">@item.Name</label>
                        <input class="form-check-input" type="checkbox" id="@($"chk{item.ID}")" name="TeachersId" value="@item.ID">
                    </div>
                }
            </div>
            <div class="form-group">
                <input type="button" onclick="submitFrom()" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <script>

        function submitFrom() {
            var from = document.getElementById("addCoursefrom");
            EditNameOfRequiredCourses();
            from.submit();
        }

        function EditNameOfRequiredCourses(){
            var inputs = document.querySelectorAll('input[class="requiredCourses"]');
            console.log(inputs);

            inputs.forEach(function(item,index){
                item.name = `PrerequisitesId[${index}]`
            });
        }

        var requiredCourses = @json
        var requiredCourseIds = @reqIdjson
        console.log(RequiredCourse);
        console.log(requiredCourseIds);


        function addItem() {
            console.log("test");
            // Get the text from the input field
            var newItemText = document.getElementById("newItem").value;
            var indexOfNewItemText = requiredCourses.indexOf(newItemText);
            if (!newItemText || indexOfNewItemText === -1) return; // Prevent empty items

            // Create a new list item element
            var newListItem = document.createElement("li");
            newListItem.classList.add("list-group-item", "d-flex", "justify-content-between", "align-items-center");
            newListItem.textContent = newItemText;

            var newIput = document.createElement("input");
            newIput.value = requiredCourseIds[indexOfNewItemText];
            newIput.type = "hidden";
            newIput.classList.add("requiredCourses");
            newListItem.appendChild(newIput);

            // Add a remove button to each list item
            var removeButton = document.createElement("button");
            removeButton.classList.add("btn", "btn-sm", "btn-outline-danger");
            removeButton.textContent = "Remove";
            removeButton.onclick = function () {
                this.parentNode.remove();
            }
            newListItem.appendChild(removeButton);

            // Add the new list item to the existing list
            var itemList = document.getElementById("itemList");
            itemList.appendChild(newListItem);

            // Clear the input field for the next item
            document.getElementById("newItem").value = "";
            event.preventDefault();
        }
         function removeItem() {
            this.parentNode.remove();
        }
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
